<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Windows.Forms" #> 
<#   
	var dict= new Dictionary<Type, TypeWrapper>();
	GetTypeRec(typeof(Form),dict);
	Type[] targetTypes = new Type[]{typeof(Form),typeof(Button)};   
#>
namespace InterfaceGenerator
{
<# foreach(var targetType in dict.Keys) {#>
	public interface <#= dict[targetType].WrappingName #>
	{
<# foreach(var prop in targetType.GetProperties()){ 
 
	var hasGetter = prop.CanRead;
	var hasSetter = prop.CanWrite;

	var propTypeName = GetWrappedTypeName(prop.PropertyType,dict);
		 
	if(prop.GetIndexParameters().Length == 0){ 
#>
		<#= propTypeName.Replace('+','.') #> <#= prop.Name #> { <#=hasGetter ? "get;" : "" #> <#=hasSetter ? "set;" : "" #>}
<# } 
	else{
		var indexerStr =  prop.GetIndexParameters()
			.Select( (para,index) => para.ParameterType.FullName.Replace('+','.') + " index" + index.ToString() + ",")
			.Reverse()
			.Aggregate("", (ele,acc) => acc + ele);

		indexerStr = indexerStr.TrimEnd(',');
#>
		<#= propTypeName.Replace('+','.') #> this[<#= indexerStr #>]{ <#=hasGetter ? "get;" : "" #> <#=hasSetter ? "set;" : "" #>}
<# } #>
<# }
   foreach(var method in targetType.GetMethods().Where(info => !info.IsSpecialName))
   { 
	  // var returnTypeName = GetWrappedTypeName(method.ReturnType, dict);
   #>     
        //  <#= method.Name #>
<#
   }
 #>
	}

<# } #>
}

<#+ 
    static void  GetTypeRec(Type type,  Dictionary<Type, TypeWrapper> dict)
    {
        if ((type.IsValueType && !type.IsGenericType) || type == typeof(string) || type.IsByRef || type.IsGenericParameter) { return; }
            
        var realType = type.IsGenericType ? type.GetGenericTypeDefinition() : type;

		if(realType.IsArray)
		{
			realType =  typeof (IArrayDummy<>);
		} 

        if (dict.ContainsKey(realType)) { return; }

        dict.Add(realType, new TypeWrapper(realType));
            
        foreach (var propType in type.GetProperties().Select(info => info.PropertyType))
        {
            GetTypeRec(propType, dict);
        }

        foreach (var method in type.GetMethods())
        {
            GetTypeRec(method.ReturnType, dict);
        }
    }

	static string GetWrappedTypeName(Type type, Dictionary<Type, TypeWrapper> dict)
    {
        var propRealType = type.IsGenericType ? type.GetGenericTypeDefinition() : type;

		if(type.IsArray)
        {
			propRealType =  typeof(IArrayDummy<>);
			type = propRealType.MakeGenericType(new []{type.GetElementType()});
        }

        var propTypeName = dict.ContainsKey(propRealType) ? dict[propRealType].GetWrappingNameWithType(type.GenericTypeArguments) : propRealType.FullName;
            
        return propTypeName ?? (propRealType.IsGenericParameter ? string.Format("T{0}", propRealType.GenericParameterPosition) : "T0");
    }

    class TypeWrapper
    {
        private const string ClassNamePlaceHolder = "IGeneratedCloneFor";

        private readonly Type _baseType;
        private readonly string _wrappingName;

        public TypeWrapper(Type baseType)
        {
            _baseType = baseType;
            _wrappingName = MakeCloneInterfaceName(_baseType);
        }

        public string WrappingName
        {
            get { return _wrappingName; }
        }

        private static string MakeCloneInterfaceName(Type type)
        {
            if (!type.IsGenericType) return ClassNamePlaceHolder + type.Name.Replace("[]", "Array");

            var genericParamString = GetGenericParamString(Enumerable.Range(0, type.GetGenericArguments().Length).Select(i => string.Format("T{0}", i)));
            var typeNameWithoutGenericParams = type.Name.Split('`')[0];

            return string.Format("{0}{1}<{2}>", ClassNamePlaceHolder, typeNameWithoutGenericParams, genericParamString);
        }

        private static string GetGenericParamString(IEnumerable<string> typeParamString)
        {
            var genericParamString = typeParamString
                .Aggregate("", (s, i) => string.Format("{0}{1},", s, i))
                .TrimEnd(',');
            return genericParamString;
        }

        public string GetWrappingNameWithType(Type[] types)
        {
            if (!_baseType.IsGenericType) return ClassNamePlaceHolder + _baseType.Name.Replace("[]", "Array");

            var genericParamString = GetGenericParamString(types.Select(GetParameterName));
            var typeNameWithoutGenericParams = _baseType.Name.Split('`')[0];

            return string.Format("{0}{1}<{2}>", ClassNamePlaceHolder, typeNameWithoutGenericParams, genericParamString);
        }

        private static string GetParameterName(Type type)
        {
            return string.IsNullOrEmpty(type.FullName)
                ? string.Format("T{0}", type.GenericParameterPosition)
                : type.FullName;
        }
    }

	interface IArrayDummy<T>
    {

        System.Int32 Length { get; }
        System.Int64 LongLength { get; }
        System.Int32 Rank { get; }
        System.Object SyncRoot { get; }
        System.Boolean IsReadOnly { get; }
        System.Boolean IsFixedSize { get; }
        System.Boolean IsSynchronized { get; }
        void Set(System.Int32 index0, T index1);
        T Get(System.Int32 index0);
        System.Object GetValue(System.Int32[] index0);
        System.Object GetValue(System.Int32 index0);
        System.Object GetValue(System.Int32 index0, System.Int32 index1);
        System.Object GetValue(System.Int32 index0, System.Int32 index1, System.Int32 index2);
        System.Object GetValue(System.Int64 index0);
        System.Object GetValue(System.Int64 index0, System.Int64 index1);
        System.Object GetValue(System.Int64 index0, System.Int64 index1, System.Int64 index2);
        System.Object GetValue(System.Int64[] index0);
        void SetValue(System.Object index0, System.Int32 index1);
        void SetValue(System.Object index0, System.Int32 index1, System.Int32 index2);
        void SetValue(System.Object index0, System.Int32 index1, System.Int32 index2, System.Int32 index3);
        void SetValue(System.Object index0, System.Int32[] index1);
        void SetValue(System.Object index0, System.Int64 index1);
        void SetValue(System.Object index0, System.Int64 index1, System.Int64 index2);
        void SetValue(System.Object index0, System.Int64 index1, System.Int64 index2, System.Int64 index3);
        void SetValue(System.Object index0, System.Int64[] index1);
        System.Int32 GetLength(System.Int32 index0);
        System.Int64 GetLongLength(System.Int32 index0);
        System.Int32 GetUpperBound(System.Int32 index0);
        System.Int32 GetLowerBound(System.Int32 index0);
        System.Object Clone();
        void CopyTo(System.Array index0, System.Int32 index1);
        void CopyTo(System.Array index0, System.Int64 index1);
        System.Collections.IEnumerator GetEnumerator();
        void Initialize();
        System.String ToString();
        System.Boolean Equals(System.Object index0);
        System.Int32 GetHashCode();
        System.Type GetType();
    }
#>