<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Windows.Forms" #> 
<#   
   Dictionary<Type, string> dict= new Dictionary<Type, string>();

	GetTypeRec(typeof(Form),dict);

   Type[] targetTypes = new Type[]{typeof(Form),typeof(Button)};   
 #>

namespace InterfaceGenerator
{
	<# foreach(var targetType in dict.Keys) {#>
	public interface IGeneratedCloneFor<#= targetType.Name #>
	{
		//値型プロパティ
		<# foreach(var prop in targetType.GetProperties().Where(p => !p.PropertyType.IsArray && p.GetIndexParameters().Length == 0)){ #>

		<# 
			var hasGetter = prop.CanRead;
			var hasSetter = prop.CanWrite;

			var propTypeName = dict.ContainsKey(prop.PropertyType) ? "IGeneratedCloneFor" + prop.PropertyType.Name : prop.PropertyType.FullName;
		 #>

		<#= propTypeName.Replace('+','.') #> <#= prop.Name #> { <#=hasGetter ? "get;" : "" #> <#=hasSetter ? "set;" : "" #>}

		<# } #>
    }
	<# } #>
}

<#+ 
void GetTypeRec(Type type,  Dictionary<Type, string> dict)
{
    if (type.IsValueType || type == typeof(string) || type.IsArray) { return; }
            
    if(dict.ContainsKey(type)){return;}

    dict.Add(type, type.Name);
            
    foreach (var propType in type.GetProperties().Select(info => info.PropertyType))
    {
        GetTypeRec(propType, dict);
    }

}
 #>

